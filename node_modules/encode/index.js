var spawn = require('child_process').spawn
  , fs = require('fs');

function _run(exe, args, opts, cb, fail) {
    var s = spawn(exe, args, opts);

    s.stdout.on('data', function (data) {
        console.log(exe + ' stdout: ' + data);
    });
    s.stderr.on('data', function (data) {
        console.log(exe + ' stderr: ' + data);
    });

    s.on('exit', function (code) {
        if (code !== 0) {
            console.log(exe + ' failed with error code ' + code);
            if(fail) { fail(); }
        }
        else {
            console.log(exe + ' finished.');
            if(cb) { cb(); }
        }
    });
}

module.exports = function(upload_dir, media_dir) { 

    // create media directory if empty
    try {
        fs.mkdirSync(media_dir);
    }catch(e){}

    return {

        onupload: function(identifier, filename) {

            // XXX: It should be possible to start encoding as the upload
            // is coming in by spawning an avconv process directly as
            // chunks come in. However, it's probably simpler for now to
            // just deal with the file once it finishes.

            var ext = filename.split('.');
            ext = ext[ext.length-1];

            // .orig is added in case the original ends in .mp4 or .webm
            var outfile = identifier + '.orig.' + ext;

            // JOIN
            _run(__dirname + '/../../script/join.py',
                 [upload_dir, identifier, outfile], 
                 {cwd:media_dir, env:process.env},
                 function() {

                     // XXX: completion/error handling

                     // once joined, encode & analyze
                     _run(__dirname + '/../../script/encode.py',
                          [outfile, identifier],
                          {cwd:media_dir, env:process.env});
                     
                     // use submodule copy of `segment' binary
                     _run('./bin/segment',
                          [media_dir + outfile],
                          {cwd:__dirname + '/../../lib/segment/', env:process.env},
                          function() {
                              // rename from ID.orig.ext to ID.ext
                              fs.rename(media_dir + outfile + '.analysis', 
                                        media_dir + identifier + '.analysis');
                          });
                 },
                 function() {
                     console.log("ERROR: join.py");
                 });
        }
    }
};
